// Package types contains the generated Sophos types
//
// This file was generated by bin/gen.go! DO NOT EDIT!
package types

import (
	"fmt"

	"github.com/esurdam/go-sophos"
)

// Right is a generated struct representing the Sophos Right Endpoint
// GET /api/nodes/right
type Right struct {
	RightGroup RightGroup `json:"right_group"`
	RightRight RightRight `json:"right_right"`
}

var defsRight = map[string]sophos.RestObject{
	"RightGroup": &RightGroup{},
	"RightRight": &RightRight{},
}

// RestObjects implements the sophos.Node interface and returns a map of Right's Objects
func (Right) RestObjects() map[string]sophos.RestObject {
	return defsRight
}

// GetPath implements sophos.RestGetter
func (*Right) GetPath() string { return "/api/nodes/right" }

// RefRequired implements sophos.RestGetter
func (*Right) RefRequired() (string, bool) { return "", false }

var defRight = &sophos.Definition{Description: "right", Name: "right", Link: "/api/definitions/right", Swag: map[string]sophos.MethodMap{"/objects/right/group/": {"post": sophos.MethodDescriptions{Description: "Create a new right/group object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/group that will be created", Type: "", Required: true}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{403: {Description: "Forbidden"}, 201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available right/group objects", Parameters: []sophos.Parameter(nil), Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{403: {Description: "Forbidden"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}}}}, "/objects/right/group/{ref}": {"patch": sophos.MethodDescriptions{Description: "Changes to parts of the object group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/group that will be changes", Type: "", Required: true}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/group that will be updated", Type: "", Required: true}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 204: {Description: "OK"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}}, "/objects/right/group/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"right/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/right/right/": {"get": sophos.MethodDescriptions{Description: "Returns all available right/right objects", Parameters: []sophos.Parameter(nil), Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new right/right object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/right that will be created", Type: "", Required: true}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/right/right/{ref}": {"delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object right", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 204: {Description: "OK"}, 400: {Description: "BadRequest"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available right types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object right types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/right that will be changes", Type: "", Required: true}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object right", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "right/right that will be updated", Type: "", Required: true}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}}, "/objects/right/right/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"right/right"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}}}

// Definition returns the /api/definitions struct of Right
func (Right) Definition() sophos.Definition { return *defRight }

// ApiRoutes returns all known Right Paths
func (Right) ApiRoutes() []string {
	return []string{
		"/api/objects/right/group/",
		"/api/objects/right/group/{ref}",
		"/api/objects/right/group/{ref}/usedby",
		"/api/objects/right/right/",
		"/api/objects/right/right/{ref}",
		"/api/objects/right/right/{ref}/usedby",
	}
}

// References returns the Right's references. These strings serve no purpose other than to demonstrate which
// Reference keys are used for this Endpoint
func (Right) References() []string {
	return []string{
		"REF_RightGroup",
		"REF_RightRight",
	}
}

// RightGroup is an Sophos Endpoint subType and implements sophos.RestObject
type RightGroup []interface{}

// GetPath implements sophos.RestObject and returns the RightGroup GET path
// Returns all available right/group objects
func (*RightGroup) GetPath() string { return "/api/objects/right/group/" }

// RefRequired implements sophos.RestObject
func (*RightGroup) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the RightGroup DELETE path
// Creates or updates the complete object group
func (*RightGroup) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/right/group/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the RightGroup PATCH path
// Changes to parts of the object group types
func (*RightGroup) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/right/group/%s", ref)
}

// PostPath implements sophos.RestObject and returns the RightGroup POST path
// Create a new right/group object
func (*RightGroup) PostPath() string {
	return "/api/objects/right/group/"
}

// PutPath implements sophos.RestObject and returns the RightGroup PUT path
// Creates or updates the complete object group
func (*RightGroup) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/right/group/%s", ref)
}

// RightRight is an Sophos Endpoint subType and implements sophos.RestObject
type RightRights []RightRight
type RightRight struct {
	Locked    string `json:"_locked"`
	Reference string `json:"_ref"`
	_type     string `json:"_type"`
	Comment   string `json:"comment"`
	Name      string `json:"name"`
}

// GetPath implements sophos.RestObject and returns the RightRights GET path
// Returns all available right/right objects
func (*RightRights) GetPath() string { return "/api/objects/right/right/" }

// RefRequired implements sophos.RestObject
func (*RightRights) RefRequired() (string, bool) { return "", false }

// GetPath implements sophos.RestObject and returns the RightRights GET path
// Returns all available right types
func (r *RightRight) GetPath() string { return fmt.Sprintf("/api/objects/right/right/%s", r.Reference) }

// RefRequired implements sophos.RestObject
func (r *RightRight) RefRequired() (string, bool) { return r.Reference, true }

// DeletePath implements sophos.RestObject and returns the RightRight DELETE path
// Creates or updates the complete object right
func (*RightRight) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/right/right/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the RightRight PATCH path
// Changes to parts of the object right types
func (*RightRight) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/right/right/%s", ref)
}

// PostPath implements sophos.RestObject and returns the RightRight POST path
// Create a new right/right object
func (*RightRight) PostPath() string {
	return "/api/objects/right/right/"
}

// PutPath implements sophos.RestObject and returns the RightRight PUT path
// Creates or updates the complete object right
func (*RightRight) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/right/right/%s", ref)
}

// Type implements sophos.Object
func (r *RightRight) GetType() string { return r._type }
