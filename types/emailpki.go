// Package types contains the generated Sophos types
//
// This file was generated by bin/gen.go! DO NOT EDIT!
package types

import (
	"fmt"

	"github.com/esurdam/go-sophos"
)

// Emailpki is a generated struct representing the Sophos Emailpki Endpoint
// GET /api/nodes/emailpki
type Emailpki struct {
	Authority struct {
		Cert                  string `json:"cert"`
		Fingerprint           string `json:"fingerprint"`
		Key                   string `json:"key"`
		PostmasterFingerprint string `json:"postmaster_fingerprint"`
		PostmasterPrivkey     string `json:"postmaster_privkey"`
		PostmasterPubkey      string `json:"postmaster_pubkey"`
	} `json:"authority"`
	Global struct {
		City         string `json:"city"`
		Country      string `json:"country"`
		Organization string `json:"organization"`
		Postmaster   string `json:"postmaster"`
		Status       int64  `json:"status"`
	} `json:"global"`
	Objects struct {
		Cas     []string      `json:"cas"`
		Openpgp []interface{} `json:"openpgp"`
		Smime   []interface{} `json:"smime"`
		Users   []interface{} `json:"users"`
	} `json:"objects"`
	Openpgp struct {
		MainKeysize int64 `json:"main_keysize"`
		SubKeysize  int64 `json:"sub_keysize"`
	} `json:"openpgp"`
	Options struct {
		ExternalAuto     int64  `json:"external_auto"`
		Keyserver        string `json:"keyserver"`
		PolicyDecryption int64  `json:"policy_decryption"`
		PolicyEncryption int64  `json:"policy_encryption"`
		PolicySign       int64  `json:"policy_sign"`
		PolicyVerify     int64  `json:"policy_verify"`
	} `json:"options"`
}

var defsEmailpki = map[string]sophos.RestObject{
	"EmailpkiOpenpgp": &EmailpkiOpenpgp{},
	"EmailpkiUser":    &EmailpkiUser{},
	"EmailpkiGroup":   &EmailpkiGroup{},
	"EmailpkiSmime":   &EmailpkiSmime{},
}

// RestObjects implements the sophos.Node interface and returns a map of Emailpki's Objects
func (Emailpki) RestObjects() map[string]sophos.RestObject {
	return defsEmailpki
}

// GetPath implements sophos.RestGetter
func (*Emailpki) GetPath() string { return "/api/nodes/emailpki" }

// RefRequired implements sophos.RestGetter
func (*Emailpki) RefRequired() (string, bool) { return "", false }

var defEmailpki = &sophos.Definition{Description: "emailpki", Name: "emailpki", Link: "/api/definitions/emailpki", Swag: map[string]sophos.MethodMap{"/objects/emailpki/openpgp/": {"get": sophos.MethodDescriptions{Description: "Returns all available emailpki/openpgp objects", Parameters: []sophos.Parameter(nil), Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new emailpki/openpgp object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/openpgp that will be created", Type: "", Required: true}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{403: {Description: "Forbidden"}, 201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}}}}, "/objects/emailpki/openpgp/{ref}": {"patch": sophos.MethodDescriptions{Description: "Changes to parts of the object openpgp types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/openpgp that will be changes", Type: "", Required: true}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object openpgp", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/openpgp that will be updated", Type: "", Required: true}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object openpgp", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 204: {Description: "OK"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available openpgp types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}}, "/objects/emailpki/user/": {"get": sophos.MethodDescriptions{Description: "Returns all available emailpki/user objects", Parameters: []sophos.Parameter(nil), Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new emailpki/user object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/user that will be created", Type: "", Required: true}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/group/": {"get": sophos.MethodDescriptions{Description: "Returns all available emailpki/group objects", Parameters: []sophos.Parameter(nil), Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new emailpki/group object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/group that will be created", Type: "", Required: true}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/group/{ref}": {"delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{204: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/group that will be changes", Type: "", Required: true}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/group that will be updated", Type: "", Required: true}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}}, "/objects/emailpki/group/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/smime/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/user/{ref}": {"get": sophos.MethodDescriptions{Description: "Returns all available user types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object user types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/user that will be changes", Type: "", Required: true}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object user", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/user that will be updated", Type: "", Required: true}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object user", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 204: {Description: "OK"}}}}, "/objects/emailpki/user/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/user"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/openpgp/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/openpgp"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/smime/": {"get": sophos.MethodDescriptions{Description: "Returns all available emailpki/smime objects", Parameters: []sophos.Parameter(nil), Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{403: {Description: "Forbidden"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}}}, "post": sophos.MethodDescriptions{Description: "Create a new emailpki/smime object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/smime that will be created", Type: "", Required: true}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/emailpki/smime/{ref}": {"delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object smime", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{204: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available smime types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object smime types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/smime that will be changes", Type: "", Required: true}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object smime", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "emailpki/smime that will be updated", Type: "", Required: true}}, Tags: []string{"emailpki/smime"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}}}}

// Definition returns the /api/definitions struct of Emailpki
func (Emailpki) Definition() sophos.Definition { return *defEmailpki }

// ApiRoutes returns all known Emailpki Paths
func (Emailpki) ApiRoutes() []string {
	return []string{
		"/api/objects/emailpki/group/",
		"/api/objects/emailpki/group/{ref}",
		"/api/objects/emailpki/group/{ref}/usedby",
		"/api/objects/emailpki/openpgp/",
		"/api/objects/emailpki/openpgp/{ref}",
		"/api/objects/emailpki/openpgp/{ref}/usedby",
		"/api/objects/emailpki/smime/",
		"/api/objects/emailpki/smime/{ref}",
		"/api/objects/emailpki/smime/{ref}/usedby",
		"/api/objects/emailpki/user/",
		"/api/objects/emailpki/user/{ref}",
		"/api/objects/emailpki/user/{ref}/usedby",
	}
}

// References returns the Emailpki's references. These strings serve no purpose other than to demonstrate which
// Reference keys are used for this Endpoint
func (Emailpki) References() []string {
	return []string{
		"REF_EmailpkiGroup",
		"REF_EmailpkiOpenpgp",
		"REF_EmailpkiSmime",
		"REF_EmailpkiUser",
	}
}

// EmailpkiOpenpgp is an Sophos Endpoint subType and implements sophos.RestObject
type EmailpkiOpenpgp []interface{}

// GetPath implements sophos.RestObject and returns the EmailpkiOpenpgp GET path
// Returns all available emailpki/openpgp objects
func (*EmailpkiOpenpgp) GetPath() string { return "/api/objects/emailpki/openpgp/" }

// RefRequired implements sophos.RestObject
func (*EmailpkiOpenpgp) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the EmailpkiOpenpgp DELETE path
// Creates or updates the complete object openpgp
func (*EmailpkiOpenpgp) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/openpgp/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the EmailpkiOpenpgp PATCH path
// Changes to parts of the object openpgp types
func (*EmailpkiOpenpgp) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/openpgp/%s", ref)
}

// PostPath implements sophos.RestObject and returns the EmailpkiOpenpgp POST path
// Create a new emailpki/openpgp object
func (*EmailpkiOpenpgp) PostPath() string {
	return "/api/objects/emailpki/openpgp/"
}

// PutPath implements sophos.RestObject and returns the EmailpkiOpenpgp PUT path
// Creates or updates the complete object openpgp
func (*EmailpkiOpenpgp) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/openpgp/%s", ref)
}

// EmailpkiUser is an Sophos Endpoint subType and implements sophos.RestObject
type EmailpkiUser []interface{}

// GetPath implements sophos.RestObject and returns the EmailpkiUser GET path
// Returns all available emailpki/user objects
func (*EmailpkiUser) GetPath() string { return "/api/objects/emailpki/user/" }

// RefRequired implements sophos.RestObject
func (*EmailpkiUser) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the EmailpkiUser DELETE path
// Creates or updates the complete object user
func (*EmailpkiUser) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/user/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the EmailpkiUser PATCH path
// Changes to parts of the object user types
func (*EmailpkiUser) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/user/%s", ref)
}

// PostPath implements sophos.RestObject and returns the EmailpkiUser POST path
// Create a new emailpki/user object
func (*EmailpkiUser) PostPath() string {
	return "/api/objects/emailpki/user/"
}

// PutPath implements sophos.RestObject and returns the EmailpkiUser PUT path
// Creates or updates the complete object user
func (*EmailpkiUser) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/user/%s", ref)
}

// EmailpkiGroup is an Sophos Endpoint subType and implements sophos.RestObject
type EmailpkiGroup []interface{}

// GetPath implements sophos.RestObject and returns the EmailpkiGroup GET path
// Returns all available emailpki/group objects
func (*EmailpkiGroup) GetPath() string { return "/api/objects/emailpki/group/" }

// RefRequired implements sophos.RestObject
func (*EmailpkiGroup) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the EmailpkiGroup DELETE path
// Creates or updates the complete object group
func (*EmailpkiGroup) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/group/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the EmailpkiGroup PATCH path
// Changes to parts of the object group types
func (*EmailpkiGroup) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/group/%s", ref)
}

// PostPath implements sophos.RestObject and returns the EmailpkiGroup POST path
// Create a new emailpki/group object
func (*EmailpkiGroup) PostPath() string {
	return "/api/objects/emailpki/group/"
}

// PutPath implements sophos.RestObject and returns the EmailpkiGroup PUT path
// Creates or updates the complete object group
func (*EmailpkiGroup) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/group/%s", ref)
}

// EmailpkiSmime is an Sophos Endpoint subType and implements sophos.RestObject
type EmailpkiSmime []interface{}

// GetPath implements sophos.RestObject and returns the EmailpkiSmime GET path
// Returns all available emailpki/smime objects
func (*EmailpkiSmime) GetPath() string { return "/api/objects/emailpki/smime/" }

// RefRequired implements sophos.RestObject
func (*EmailpkiSmime) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the EmailpkiSmime DELETE path
// Creates or updates the complete object smime
func (*EmailpkiSmime) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/smime/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the EmailpkiSmime PATCH path
// Changes to parts of the object smime types
func (*EmailpkiSmime) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/smime/%s", ref)
}

// PostPath implements sophos.RestObject and returns the EmailpkiSmime POST path
// Create a new emailpki/smime object
func (*EmailpkiSmime) PostPath() string {
	return "/api/objects/emailpki/smime/"
}

// PutPath implements sophos.RestObject and returns the EmailpkiSmime PUT path
// Creates or updates the complete object smime
func (*EmailpkiSmime) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/emailpki/smime/%s", ref)
}
