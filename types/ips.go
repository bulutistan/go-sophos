// Package types contains the generated Sophos types
//
// This file was generated by bin/gen.go! DO NOT EDIT!
package types

import (
	"fmt"

	"github.com/esurdam/go-sophos"
)

// Ips is a generated struct representing the Sophos Ips Endpoint
// GET /api/nodes/ips
type Ips struct {
	DNSServers     []interface{} `json:"dns_servers"`
	Engine         string        `json:"engine"`
	Exceptions     []string      `json:"exceptions"`
	Failopen       int64         `json:"failopen"`
	FileBasedRules int64         `json:"file_based_rules"`
	Groups         []string      `json:"groups"`
	HTTPServers    []interface{} `json:"http_servers"`
	Ipsfb          struct {
		AlertInterval  int64 `json:"alert_interval"`
		ConfigInterval int64 `json:"config_interval"`
		Debug          int64 `json:"debug"`
	} `json:"ipsfb"`
	LocalNetworks  []string      `json:"local_networks"`
	NumInstances   int64         `json:"num_instances"`
	PatternChannel string        `json:"pattern_channel"`
	Policy         string        `json:"policy"`
	QueueLength    int64         `json:"queue_length"`
	QueueThreshold int64         `json:"queue_threshold"`
	ReloadMethod   string        `json:"reload_method"`
	RestartPolicy  string        `json:"restart_policy"`
	RuleModifiers  []interface{} `json:"rule_modifiers"`
	Rules          []interface{} `json:"rules"`
	SkipAcks       int64         `json:"skip_acks"`
	SMTPServers    []interface{} `json:"smtp_servers"`
	Snortsettings  struct {
		MaxQueuedBytes int64  `json:"max_queued_bytes"`
		MaxQueuedSegs  int64  `json:"max_queued_segs"`
		MaxTcp         int64  `json:"max_tcp"`
		MaxUdp         int64  `json:"max_udp"`
		Memcap         int64  `json:"memcap"`
		SearchMethod   string `json:"search_method"`
	} `json:"snortsettings"`
	SqlServers []interface{} `json:"sql_servers"`
	Status     int64         `json:"status"`
}

var defsIps = map[string]sophos.RestObject{
	"IpsException":    &IpsException{},
	"IpsRule":         &IpsRule{},
	"IpsRuleModifier": &IpsRuleModifier{},
	"IpsGroup":        &IpsGroup{},
}

// RestObjects implements the sophos.Node interface and returns a map of Ips's Objects
func (Ips) RestObjects() map[string]sophos.RestObject {
	return defsIps
}

// GetPath implements sophos.RestGetter
func (*Ips) GetPath() string { return "/api/nodes/ips" }

// RefRequired implements sophos.RestGetter
func (*Ips) RefRequired() (string, bool) { return "", false }

var defIps = &sophos.Definition{Description: "ips", Name: "ips", Link: "/api/definitions/ips", Swag: map[string]sophos.MethodMap{"/objects/ips/rule_modifier/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/exception/": {"get": sophos.MethodDescriptions{Description: "Returns all available ips/exception objects", Parameters: []sophos.Parameter(nil), Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new ips/exception object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/exception that will be created", Type: "", Required: true}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 201: {Description: "OK"}, 400: {Description: "BadRequest"}}}}, "/objects/ips/exception/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/rule/{ref}": {"put": sophos.MethodDescriptions{Description: "Creates or updates the complete object rule", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule that will be updated", Type: "", Required: true}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object rule", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{204: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available rule types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object rule types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule that will be changes", Type: "", Required: true}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}}}}, "/objects/ips/rule/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/rule/": {"get": sophos.MethodDescriptions{Description: "Returns all available ips/rule objects", Parameters: []sophos.Parameter(nil), Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new ips/rule object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule that will be created", Type: "", Required: true}}, Tags: []string{"ips/rule"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/rule_modifier/": {"get": sophos.MethodDescriptions{Description: "Returns all available ips/rule_modifier objects", Parameters: []sophos.Parameter(nil), Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new ips/rule_modifier object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule_modifier that will be created", Type: "", Required: true}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/rule_modifier/{ref}": {"delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object rule_modifier", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 204: {Description: "OK"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available rule_modifier types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object rule_modifier types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule_modifier that will be changes", Type: "", Required: true}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object rule_modifier", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/rule_modifier that will be updated", Type: "", Required: true}}, Tags: []string{"ips/rule_modifier"}, Responses: map[int]struct{ Description string }{400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}}}}, "/objects/ips/exception/{ref}": {"get": sophos.MethodDescriptions{Description: "Returns all available exception types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}}}, "patch": sophos.MethodDescriptions{Description: "Changes to parts of the object exception types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/exception that will be changes", Type: "", Required: true}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object exception", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/exception that will be updated", Type: "", Required: true}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object exception", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"ips/exception"}, Responses: map[int]struct{ Description string }{204: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/group/": {"get": sophos.MethodDescriptions{Description: "Returns all available ips/group objects", Parameters: []sophos.Parameter(nil), Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "post": sophos.MethodDescriptions{Description: "Create a new ips/group object", Parameters: []sophos.Parameter{{Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/group that will be created", Type: "", Required: true}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{201: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}, "/objects/ips/group/{ref}": {"patch": sophos.MethodDescriptions{Description: "Changes to parts of the object group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/group that will be changes", Type: "", Required: true}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "put": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}, {Name: "X-Restd-Insert", In: "header", Description: "Path and position (optional for arrays, required for hashes, not used for strings) of a node, where to insert the newly created object, format 'node-path [index]', e.g. array: 'packetfilter.rules 2', string: 'ha.aws.cloudwatch.profile', hash: 'auth.api_tokens myToken123'", Type: "string", Required: false}, {Name: "body", In: "body", Description: "ips/group that will be updated", Type: "", Required: true}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}}}, "delete": sophos.MethodDescriptions{Description: "Creates or updates the complete object group", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}, {Name: "X-Restd-Err-Ack", In: "header", Description: "Acknowledge confd errors (required for DELETE calls).", Type: "string", Required: false}, {Name: "X-Restd-Lock-Override", In: "header", Description: "Override confd lock (required to perform action on {'_locked': 'user'} objects).", Type: "string", Required: false}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{204: {Description: "OK"}, 400: {Description: "BadRequest"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}, "get": sophos.MethodDescriptions{Description: "Returns all available group types", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}, 404: {Description: "NotFound"}, 200: {Description: "OK"}, 400: {Description: "BadRequest"}}}}, "/objects/ips/group/{ref}/usedby": {"get": sophos.MethodDescriptions{Description: "Returns the objects and the nodes that use the object with the given ref", Parameters: []sophos.Parameter{{Name: "ref", In: "path", Description: "id of the object", Type: "string", Required: true}}, Tags: []string{"ips/group"}, Responses: map[int]struct{ Description string }{200: {Description: "OK"}, 401: {Description: "Unauthorized"}, 403: {Description: "Forbidden"}}}}}}

// Definition returns the /api/definitions struct of Ips
func (Ips) Definition() sophos.Definition { return *defIps }

// ApiRoutes returns all known Ips Paths
func (Ips) ApiRoutes() []string {
	return []string{
		"/api/objects/ips/exception/",
		"/api/objects/ips/exception/{ref}",
		"/api/objects/ips/exception/{ref}/usedby",
		"/api/objects/ips/group/",
		"/api/objects/ips/group/{ref}",
		"/api/objects/ips/group/{ref}/usedby",
		"/api/objects/ips/rule/",
		"/api/objects/ips/rule/{ref}",
		"/api/objects/ips/rule/{ref}/usedby",
		"/api/objects/ips/rule_modifier/",
		"/api/objects/ips/rule_modifier/{ref}",
		"/api/objects/ips/rule_modifier/{ref}/usedby",
	}
}

// References returns the Ips's references. These strings serve no purpose other than to demonstrate which
// Reference keys are used for this Endpoint
func (Ips) References() []string {
	return []string{
		"REF_IpsException",
		"REF_IpsGroup",
		"REF_IpsRule",
		"REF_IpsRuleModifier",
	}
}

// IpsException is an Sophos Endpoint subType and implements sophos.RestObject
type IpsExceptions []IpsException
type IpsException struct {
	Locked              string   `json:"_locked"`
	Reference           string   `json:"_ref"`
	_type               string   `json:"_type"`
	Comment             string   `json:"comment"`
	DestinationNetworks []string `json:"destination_networks"`
	Name                string   `json:"name"`
	Operator            string   `json:"operator"`
	Services            []string `json:"services"`
	Skiplist            []string `json:"skiplist"`
	SourceNetworks      []string `json:"source_networks"`
	Status              bool     `json:"status"`
}

// GetPath implements sophos.RestObject and returns the IpsExceptions GET path
// Returns all available ips/exception objects
func (*IpsExceptions) GetPath() string { return "/api/objects/ips/exception/" }

// RefRequired implements sophos.RestObject
func (*IpsExceptions) RefRequired() (string, bool) { return "", false }

// GetPath implements sophos.RestObject and returns the IpsExceptions GET path
// Returns all available exception types
func (i *IpsException) GetPath() string {
	return fmt.Sprintf("/api/objects/ips/exception/%s", i.Reference)
}

// RefRequired implements sophos.RestObject
func (i *IpsException) RefRequired() (string, bool) { return i.Reference, true }

// DeletePath implements sophos.RestObject and returns the IpsException DELETE path
// Creates or updates the complete object exception
func (*IpsException) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/exception/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the IpsException PATCH path
// Changes to parts of the object exception types
func (*IpsException) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/exception/%s", ref)
}

// PostPath implements sophos.RestObject and returns the IpsException POST path
// Create a new ips/exception object
func (*IpsException) PostPath() string {
	return "/api/objects/ips/exception/"
}

// PutPath implements sophos.RestObject and returns the IpsException PUT path
// Creates or updates the complete object exception
func (*IpsException) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/exception/%s", ref)
}

// Type implements sophos.Object
func (i *IpsException) GetType() string { return i._type }

// IpsRule is an Sophos Endpoint subType and implements sophos.RestObject
type IpsRule []interface{}

// GetPath implements sophos.RestObject and returns the IpsRule GET path
// Returns all available ips/rule objects
func (*IpsRule) GetPath() string { return "/api/objects/ips/rule/" }

// RefRequired implements sophos.RestObject
func (*IpsRule) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the IpsRule DELETE path
// Creates or updates the complete object rule
func (*IpsRule) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the IpsRule PATCH path
// Changes to parts of the object rule types
func (*IpsRule) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule/%s", ref)
}

// PostPath implements sophos.RestObject and returns the IpsRule POST path
// Create a new ips/rule object
func (*IpsRule) PostPath() string {
	return "/api/objects/ips/rule/"
}

// PutPath implements sophos.RestObject and returns the IpsRule PUT path
// Creates or updates the complete object rule
func (*IpsRule) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule/%s", ref)
}

// IpsRuleModifier is an Sophos Endpoint subType and implements sophos.RestObject
type IpsRuleModifier []interface{}

// GetPath implements sophos.RestObject and returns the IpsRuleModifier GET path
// Returns all available ips/rule_modifier objects
func (*IpsRuleModifier) GetPath() string { return "/api/objects/ips/rule_modifier/" }

// RefRequired implements sophos.RestObject
func (*IpsRuleModifier) RefRequired() (string, bool) { return "", false }

// DeletePath implements sophos.RestObject and returns the IpsRuleModifier DELETE path
// Creates or updates the complete object rule_modifier
func (*IpsRuleModifier) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule_modifier/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the IpsRuleModifier PATCH path
// Changes to parts of the object rule_modifier types
func (*IpsRuleModifier) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule_modifier/%s", ref)
}

// PostPath implements sophos.RestObject and returns the IpsRuleModifier POST path
// Create a new ips/rule_modifier object
func (*IpsRuleModifier) PostPath() string {
	return "/api/objects/ips/rule_modifier/"
}

// PutPath implements sophos.RestObject and returns the IpsRuleModifier PUT path
// Creates or updates the complete object rule_modifier
func (*IpsRuleModifier) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/rule_modifier/%s", ref)
}

// IpsGroup is an Sophos Endpoint subType and implements sophos.RestObject
type IpsGroups []IpsGroup
type IpsGroup struct {
	Locked       string   `json:"_locked"`
	Reference    string   `json:"_ref"`
	_type        string   `json:"_type"`
	Action       string   `json:"action"`
	Age          int64    `json:"age"`
	Comment      string   `json:"comment"`
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	Notification bool     `json:"notification"`
	Status       bool     `json:"status"`
	Subgroups    []string `json:"subgroups"`
	Warnings     bool     `json:"warnings"`
}

// GetPath implements sophos.RestObject and returns the IpsGroups GET path
// Returns all available ips/group objects
func (*IpsGroups) GetPath() string { return "/api/objects/ips/group/" }

// RefRequired implements sophos.RestObject
func (*IpsGroups) RefRequired() (string, bool) { return "", false }

// GetPath implements sophos.RestObject and returns the IpsGroups GET path
// Returns all available group types
func (i *IpsGroup) GetPath() string { return fmt.Sprintf("/api/objects/ips/group/%s", i.Reference) }

// RefRequired implements sophos.RestObject
func (i *IpsGroup) RefRequired() (string, bool) { return i.Reference, true }

// DeletePath implements sophos.RestObject and returns the IpsGroup DELETE path
// Creates or updates the complete object group
func (*IpsGroup) DeletePath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/group/%s", ref)
}

// PatchPath implements sophos.RestObject and returns the IpsGroup PATCH path
// Changes to parts of the object group types
func (*IpsGroup) PatchPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/group/%s", ref)
}

// PostPath implements sophos.RestObject and returns the IpsGroup POST path
// Create a new ips/group object
func (*IpsGroup) PostPath() string {
	return "/api/objects/ips/group/"
}

// PutPath implements sophos.RestObject and returns the IpsGroup PUT path
// Creates or updates the complete object group
func (*IpsGroup) PutPath(ref string) string {
	return fmt.Sprintf("/api/objects/ips/group/%s", ref)
}

// Type implements sophos.Object
func (i *IpsGroup) GetType() string { return i._type }
